<?php

namespace Caja\SiafcaIntranetBundle\Repository;



use Doctrine\ORM\Query\ResultSetMapping;
/**
 * OrganismoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrganismoRepository extends \Doctrine\ORM\EntityRepository
{

    public function faltantesXanioYorg($anio,$organismo){
        $em = $this->getEntityManager();
        $db = $em->getConnection();
        
        
        //$rsm = new ResultSetMapping;
        //$rsm->addEntityResult('SiafcaIntranetBundle:Liquidacion', 'LIQ');
        //$rsm->addFieldResult('LIQ', 'mes', 'Mes');
        //$rsm->addJoinedEntityResult('SiafcaIntranetBundle:Parametrizacion', 'PAR', 'LIQ', 'tipoLiq');
        //$rsm->addFieldResult('PAR', 'codigo', 'Codigo Tipo');
        $query = "(SELECT '01','111: Original Normal' from dual union
                  SELECT '02','111: Original Normal' from dual union
                  SELECT '03','111: Original Normal' from dual union
                  SELECT '04','111: Original Normal' from dual union
                  SELECT '05','111: Original Normal' from dual union
                  SELECT '06','111: Original Normal' from dual union
                  SELECT '06','211: Original S.A.C.' from dual union
                  SELECT '07','111: Original Normal' from dual union
                  SELECT '08','111: Original Normal' from dual union
                  SELECT '09','111: Original Normal' from dual union
                  SELECT '10','111: Original Normal' from dual union
                  SELECT '11','111: Original Normal' from dual union
                  SELECT '12','111: Original Normal' from dual union
                  SELECT '12','211: Original S.A.C.' from dual)
                  minus
                  (SELECT LIQ.mes,concat(concat(PAR.codigo,': '),PAR.nombre)
                  FROM
                  liquidacion LIQ,
                  parametrizacion PAR,
                  organismo ORG,
                  estado EST
                  WHERE
                  LIQ.organismo_id=ORG.id and
                  LIQ.tipoLiq_id=PAR.id and
                  LIQ.anio='".$anio."' and
                  ORG.codigo='".$organismo."' and
                  LIQ.estado_id=EST.id and
                  EST.estado IN('08','09','10','11') and
                  PAR.codigo in('111','211'))";
        $stmt = $db->prepare($query);

        $params = array();
        $stmt->execute($params);
        $po=$stmt->fetchAll();

        $fecha =  new \DateTime();
        $fechaActual = \DateTime::createFromFormat("Y-m-d",$fecha->format("Y-m-d"));
        $anioActual = $fechaActual->format("Y");
        $mesActual = $fechaActual->format("m");

        //cambie esta linea que estaba definida en el if(anio == anioactual), porque sino genera 
        //un error en tiempo de ejecucion, por no definido.
        
        $faltantes = array();
        if ($anio == $anioActual) {
            foreach ($po as $row) {
                if ($row["'01'"] < $mesActual)
                    $faltantes[] = array('mes' => $row["'01'"], 'tipo' => $row["'111:ORIGINALNORMAL'"]);
            }
            return $faltantes;
        }
        foreach ($po as $row) {
            $faltantes[] = array('mes' => $row["'01'"], 'tipo' => $row["'111:ORIGINALNORMAL'"]);
        }

        return $faltantes;
    }
    
    /*
     * metodo para obtener todos los aportantes asociados a un organismo
     * @param idorg id del organismo
     * @return array con todos los aportantes
     */
    public function obtenerAportantes($idOrg,$request)
    {
        $dql = 'SELECT '
                . 'p, ap, c, r '
            . 'FROM '
                . 'SiafcaIntranetBundle:Aportante ap '
                . 'JOIN ap.revista r '
                . 'JOIN ap.cargo c '
                . 'JOIN ap.persona p '
                . 'JOIN ap.organismo o '
            . 'WHERE '
                . 'o.id = :idOrganismo';

        // Si existe la variable actualOnly en el query string, se recuperaran solo los usuaros actuales
        if ($request->query->get('actualOnly')) {
            $today = new \DateTime('now');
            $dql .= " AND ap.fechaAlta <= '".$today->format("Y-m-d")." 23:59:59'";
            $dql .= " AND (ap.fechaBaja >= '".$today->format("Y-m-d")." 23:59:59' OR ap.fechaBaja IS NULL)";
        }

        return $this->getEntityManager()
                    ->createQuery($dql)
                    ->setParameter('idOrganismo', $idOrg);
        
    }

    /*
     * metodo que obtiene todos los aportantes asociados a un organismo y con su cuil
     * @param idorg id del organismo
     * @param cuil cuil del aportante
     */
    public function obtenerAportantesCuil($idOrg,$cuil)
    {
        $dql = 'SELECT '
                . 'p, ap, c, r '
            . 'FROM '
                . 'SiafcaIntranetBundle:Aportante ap '
                . 'JOIN ap.revista r '
                . 'JOIN ap.cargo c '
                . 'JOIN ap.persona p '
                . 'JOIN ap.organismo o '
            . 'WHERE '
                . ' o.id = :idOrg  AND p.cuil = :cuil '
                . ' ORDER BY p.apellidoPat,p.nombre ASC '
                ;
        //uso la consulta        
        $resultado = 
                $this->getEntityManager()
                    ->createQuery($dql)
                    ->setParameter('idOrg',$idOrg)
                    ->setParameter('cuil',$cuil)
                    ->getResult()
                ;
        return $resultado;
    }
    
    /*
     * metodo para obtener los aportantes asociados a un organismo por documento
     * @param idorg id del organismo
     * @param dni documento del usuario
     */
    public function obtenerAportantesDocumento($idOrg,$dni)
    {
        $dql = 'SELECT '
                . 'p, ap, c, r '
            . 'FROM '
                . 'SiafcaIntranetBundle:Aportante ap '
                . 'JOIN ap.revista r '
                . 'JOIN ap.cargo c '
                . 'JOIN ap.persona p '
                . 'JOIN ap.organismo o '
            . 'WHERE '
                . ' o.id = :idOrg  AND p.documento = :documento '
                . ' ORDER BY p.apellidoPat,p.nombre ASC '
                ;
        //uso la consulta        
        $resultado = 
                $this->getEntityManager()
                    ->createQuery($dql)
                    ->setParameter('idOrg',$idOrg)
                    ->setParameter('documento',$dni)
                    ->getResult()
                ;
        return $resultado;
    }
    
    /*
     * metodo para obtener los aportantes asociados a un organismo por apellido y nombre
     * @param apellido puede ser null
     * @param nombre puede ser null 
     * @param idorg no puede ser null
     */
    public function obtenerAportantesApellidoNombre($idOrg,$apellido,$nombre)
    {
        $orderby = ' ORDER BY p.apellidoPat,p.nombre ASC ';
        $where   = '';
        $select     = 'SELECT '
                . 'p, ap, c, r '
            . 'FROM '
                . 'SiafcaIntranetBundle:Aportante ap '
                . 'JOIN ap.revista r '
                . 'JOIN ap.cargo c '
                . 'JOIN ap.persona p '
                . 'JOIN ap.organismo o ';
        
        if($apellido != 'null' && $nombre != 'null')
        {
            $where = ' WHERE o.id = :idOrg  '
                    . 'AND p.apellidoPat = :apellido '
                    . 'AND p.nombre = :nombre ';
            $dql = $select . $where . $orderby;
            $resultado = 
                $this->getEntityManager()
                    ->createQuery($dql)
                    ->setParameter('idOrg',$idOrg)
                    ->setParameter('apellido',$apellido)
                    ->setParameter('nombre', $nombre)
                    ;
        }
        else if($apellido != 'null' && $nombre == 'null')
        {
            $where = ' WHERE o.id = :idOrg  AND p.apellidoPat = :apellido ';
            $dql = $select . $where . $orderby;
            $resultado = 
                $this->getEntityManager()
                    ->createQuery($dql)
                    ->setParameter('idOrg',$idOrg)
                    ->setParameter('apellido',$apellido)
                    ;
        }
        else
        {
            $where = ' WHERE o.id = :idOrg  AND p.nombre = :nombre ';
            $dql = $select . $where . $orderby;
            $resultado = 
                $this->getEntityManager()
                    ->createQuery($dql)
                    ->setParameter('idOrg',$idOrg)
                    ->setParameter('nombre',$nombre)
                    ;
        }
        
        return $resultado->getResult();
    }
}
