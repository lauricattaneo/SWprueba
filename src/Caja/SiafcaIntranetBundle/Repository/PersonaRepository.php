<?php

namespace Caja\SiafcaIntranetBundle\Repository;

use Caja\SiafcaIntranetBundle\Entity\Persona;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
/**
 * PersonaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonaRepository extends \Doctrine\ORM\EntityRepository
{
    /*
     * metodo para obtener el listado que se muestra en el index de persona
     */
    public function obtenerIndex()
    {
        $dql   = "SELECT "
                . "p, "
                . "CONCAT(p.apellidoPat, p.apellidoMat, p.nombre, p.id) AS HIDDEN ord_nombre "
                . "FROM SiafcaIntranetBundle:Persona p ";

        return $this->getEntityManager()->createQuery($dql);
    }
    
    /*
     * metodo para obtener la informacion asociada a una persona
     */
    public function obtenerPersona($id)
    {
        $persona = $this->getEntityManager()
            ->createQuery("SELECT p, a, f "
                        . "FROM SiafcaIntranetBundle:Persona p "
                            . "LEFT JOIN p.aportantes a WITH a.fechaBaja IS NULL OR a.fechaBaja > CURRENT_DATE() "
                            . "LEFT JOIN p.firmantes f WITH f.fechaHasta IS NULL OR f.fechaHasta > CURRENT_DATE() "
                        . "WHERE "
                            . "p.id = :id "
                            . "AND ( "
                                . "((a.fechaAlta IN ( "
                                    . "SELECT MIN(inner_a2.fechaAlta) "
                                    . "FROM SiafcaIntranetBundle:Aportante inner_a2 "
                                    . "WHERE (inner_a2.fechaBaja IS NULL OR inner_a2.fechaBaja > CURRENT_DATE()) "
                                        . "AND a.organismo = inner_a2.organismo "
                                        . "AND a.persona = inner_a2.persona) AND a.fechaAlta IS NOT NULL) "
                                . "AND (f.fechaDesde IN ( "
                                    . "SELECT MIN(inner_f.fechaDesde) "
                                    . "FROM SiafcaIntranetBundle:Firmante inner_f "
                                    . "WHERE (inner_f.fechaHasta IS NULL OR inner_f.fechaHasta > CURRENT_DATE()) "
                                        . "AND f.organismo = inner_f.organismo "
                                        . "AND f.persona = inner_f.persona) AND f.fechaDesde IS NOT NULL)) "
                                . "OR (f.fechaDesde IS NULL OR a.fechaAlta IS NULL)) "
                        . "ORDER BY a.fechaAlta DESC, f.fechaDesde DESC ")
            ->setParameter('id', $id)
            ->getSingleResult();
        
        return $persona;
    }
    
    public function buscarApellidoNombre($apellido, $nombre, $offset, $limite) {
        $query = $this->getEntityManager()
                ->createQuery(
                        'SELECT ' .
                        'p ' .
                        'FROM ' .
                        'SiafcaIntranetBundle:Persona p ' .
                        'WHERE ' .
                        'p.apellidoPat LIKE :apellido ' .
                        'and p.nombre LIKE :nombre ' .
                        'ORDER BY ' .
                        'p.apellidoPat, p.nombre ASC '
                )
                ->setParameter('apellido', '%' . $apellido . '%')
                ->setParameter('nombre', '%' . $nombre . '%')
                ->setFirstResult($offset)
                ->setMaxResults($limite)
                ->getResult();
        return $query;
    }
    
    public function buscarApellido($apellido, $nombre) {
       //armo la sentencia dql
       $sentencia 
             = 'SELECT ' .
                'p, ' .
                "CONCAT(p.apellidoPat, p.apellidoMat, p.nombre, p.id) AS HIDDEN ord_nombre " .
                'FROM ' .
                'SiafcaIntranetBundle:Persona p '
               ;
       //si el nombre es no vacio, se tiene que buscar por apellido y nombre
       //sino se busca solo por apellido 
       if($nombre != 'null' && $apellido != 'null')
       {
           //sentencias where y orderby
           $where = ' WHERE p.apellidoPat LIKE :apellido AND p.nombre LIKE :nombre ';
           $orderby = ' ORDER BY p.apellidoPat, p.nombre ASC ';
           $dql = $sentencia . $where . $orderby;
           
           //
           $query = $this->getEntityManager()
                         ->createQuery($dql)
                         ->setParameter('apellido', '%' . $apellido . '%')
                         ->setParameter('nombre', '%' . $nombre . '%')
                    ; 
       }
       else if($apellido != 'null' &&  $nombre == 'null')
       {
           //sentencias where y orderby
           $where = ' WHERE p.apellidoPat LIKE :apellido  ';
           $orderby = ' ORDER BY p.apellidoPat ASC ';
           
           $dql = $sentencia . $where . $orderby;
           //echo $dql;die;
           $query = $this->getEntityManager()
                         ->createQuery($dql)
                         ->setParameter('apellido', '%' . $apellido . '%')
                    ;
       }
       else
       {
           //sentencias where y orderby
           $where = ' WHERE p.nombre LIKE :nombre ';
           $orderby = ' ORDER BY p.apellidoPat  ASC ';
           
           $dql = $sentencia . $where . $orderby;
           //echo $dql;die;
           $query = $this->getEntityManager()
                         ->createQuery($dql)
                         ->setParameter('nombre', '%' . $nombre . '%')
                    ;
       }
       //sino encuentro nada, retorno false, sino retorno los resultados
       if(!$query)
       {
           $query = FALSE;
       }
       return $query;
    }
    
    //obtengo el id de una persona
    //DATO i: obligatorio, se recibe el dato a buscar (puede ser dni o cuil)
    //        en caso de apellido y nombre, viene apellid
    //DATO ii: opcional, se recibe el nombre o null
    public function buscarIdPersona($datoI,$datoII,$opcion)
    {
        $em = $this->getEntityManager();
        
        //obtengo la sentencia where
        $where = $this->obtenerWhere($opcion);
        
        //obtengo el dql
        $dql = "SELECT "
                . "p.id "
                . "FROM SiafcaIntranetBundle:Persona p "
                . $where;
        //
             
        if($opcion == 'apellido')
        {
            $query = $em->createQuery($dql)
                        ->setParameter('apellidoIngresado',$datoI)
                        ->setParameter('nombreIngresado', $datoII)
                        ->getResult();
        }
        else
        {
            $query = $em->createQuery($dql)
                        ->setParameter('datoIngresado',$datoI)
                        ->getResult();
        }
                
        //sino se encuentran resultados, retorno true
        //para generar un mensaje flash en el metodo
        if(!$query)
        {
            $query = FALSE;
        }
        else if(count($query)>0)
        {
            $query = $query[0];
        }
        return $query;
    }
    
    //segun la opcion se obtiene la sentencia where
    //esta funcion se usa para buscarIdPersona
    //recibe dni, cuil o apellido
    private function obtenerWhere($opcion)
    {
        $salida = '';
        if($opcion == 'cuil')
        {
            $salida = "WHERE p.cuil = :datoIngresado ";
        }
        else if($opcion === 'dni')
        {
            $salida = "WHERE p.documento = :datoIngresado ";
        }
        else if($opcion === 'apellido')
        {
            $salida = "WHERE p.apellidoPat = :apellidoIngresado AND p.nombre = :nombreIngresado";
        }
        return $salida;
    }
}