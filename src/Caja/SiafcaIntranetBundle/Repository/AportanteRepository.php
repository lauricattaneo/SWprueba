<?php

namespace Caja\SiafcaIntranetBundle\Repository;

use Caja\SiafcaIntranetBundle\Entity\Aportante;
use DateTime;
use Doctrine\ORM\Query;

/**
 * AportanteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AportanteRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Retorna un unico aportante encontrado segun id del organismo y cuil de persona, o falso en caso contrario
     * @param int $idOrganismo Id de entidad organismo
     * @param int $cuil Cuil de entidad persona
     * @return boolean|Object Retorna un objeto persona. En caso de no encontrar un único resultado: retorna false
     * @throws \Exception
     */
    public function getAportanteByCuil($idOrganismo = null, $cuilPersona = null, $idExpte = null)
    {              
        if (is_null($idOrganismo) || is_null($cuilPersona) || is_null($idExpte)) {
            throw new \Exception('Los parametros de consulta son inválidos');
        } else {
            $query = $this->getEntityManager()
                ->createQuery('SELECT '
                                . 'p, ap, c, r, '
                                . 'CASE WHEN EXISTS '
                                    . '(SELECT eai.id '
                                        . 'FROM SiafcaIntranetBundle:ExpteAmpItem eai '
                                            . 'JOIN eai.aportante innerap '
                                            . 'JOIN eai.expteAmparo ea '
                                        . 'WHERE innerap.id = ap.id '
                                            . 'AND ea.id = :expte) '
                                    . 'THEN 1 ELSE 0 END as disable '
                            . 'FROM '
                                . 'SiafcaIntranetBundle:Aportante ap '
                                . 'JOIN ap.revista r '
                                . 'JOIN ap.cargo c '
                                . 'JOIN ap.persona p '
                                . 'JOIN ap.organismo o '
                            . 'WHERE '
                                . 'p.cuil = :cuil '
                                . 'AND o.id = :idOrganismo'
                        )
                ->setParameter('cuil', $cuilPersona)
                ->setParameter('expte', $idExpte)
                ->setParameter('idOrganismo', $idOrganismo);
            try {
                $aportante = $query->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
            } catch (\Doctrine\Orm\NoResultException $e) {
                $aportante = false;
            }
            return $aportante;
        }
    }

    /**
     * Retorna cada organismo con el mes y fecha donde la persona figura como aportante
     * @param int $cuilAportante Cuil de entidad persona
     * @return boolean|Object Array de objetos o false
     * @throws \Exception
     */
    public function getResumenPeriodos($cuilAportante)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT '.
                    'o.nombre nombreOrganismo, l.anio anio, l.mes mes '.
                'FROM '.
                    'SiafcaIntranetBundle:Persona p '.
                    'JOIN p.aportantes a '.
                    'JOIN a.items i '.
                    'JOIN i.liquidacion l '.
                    'JOIN l.organismo o '.
                'WHERE '.
                    'p.cuil = :cuil '.
                'ORDER BY '.
                    'o.nombre ASC, '.
                    'l.anio ASC, '.
                    'l.mes ASC '
               
            )->setParameter('cuil', $cuilAportante);

        try {
            $aportes = $query->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_ARRAY);
        } catch (\Doctrine\Orm\NoResultException $e) {
            $aportes = false;
        }

        return $aportes;
    }

    

    public function getAportantesByOrganismo($idOrganismo,$offset,$limite)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT '.
                    'ap, p '.
                'FROM '.
                    'SiafcaIntranetBundle:Aportante ap '.
                    'JOIN ap.persona p '.
                'WHERE '.
                    'ap.organismo = :idOrganismo '.
                'ORDER BY '.
                    'p.apellidoPat ASC '
                )    
                ->setParameter('idOrganismo', $idOrganismo)
                ->setFirstResult($offset)
                ->setMaxResults($limite)
                ->getResult();  
       return $query;
       
    }
    
     /**
     * Devuelve solo los datos necesarios para las vistas show.
     * Con los aportantes ordenados alfabeticamente
     * @param int $idLiq
     * @param string $cuilPersona
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function getAportantescuilByLiquidacion($idLiq, $cuilPersona)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
                 'SELECT ' .
                'i, ap, p, c '.              
                'FROM SiafcaIntranetBundle:Item i ' .
                'JOIN i.liquidacion l ' .
                'JOIN i.aportante ap ' .
                'JOIN ap.persona p ' .
                'JOIN ap.cargo c ' 
                . 'WHERE '
                . 'l.id = :idLiq '
                . 'AND p.cuil = :cuilPersona '
                )    
                ->setParameter('idLiq', $idLiq)
                ->setParameter('cuilPersona', $cuilPersona);
                
        
       return $query->getResult(Query::HYDRATE_ARRAY);
       
}

  /**
     * Devuelve solo los datos necesarios para las vistas show.
     * Con los aportantes ordenados alfabeticamente
     * @param int $idLiq
     * @param string $dniPersona
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function getAportanteDniLiquidacion($idLiq, $dniPersona)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
                 'SELECT ' .
                'i, ap, p, c '.              
                'FROM SiafcaIntranetBundle:Item i ' .
                'JOIN i.liquidacion l ' .
                'JOIN i.aportante ap ' .
                'JOIN ap.persona p ' .
                'JOIN ap.cargo c ' 
                . 'WHERE '
                . 'l.id = :idLiq '
                . 'AND p.documento = :dniPersona '
                )    
                ->setParameter('idLiq', $idLiq)
                ->setParameter('dniPersona', $dniPersona);
                
        
       return $query->getResult(Query::HYDRATE_ARRAY);
       
}



  /**
     * Devuelve solo los datos necesarios para las vistas show.
     * Con los aportantes ordenados alfabeticamente
     * @param string $idLiq
     * @param string $apePersona
        * @param string $nomPersona
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function getAportantesapeByLiq($idLiq, $apePersona, $nomPersona)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
                 'SELECT ' .
                'i, ap, p, c '.              
                'FROM SiafcaIntranetBundle:Item i ' .
                'JOIN i.liquidacion l ' .
                'JOIN i.aportante ap ' .
                'JOIN ap.persona p ' .
                'JOIN ap.cargo c ' 
                . 'WHERE '
                . 'l.id = :idLiq '
                . 'AND p.apellidoPat LIKE :apellido '
                . 'AND p.nombre LIKE :nombre '
                )    
                ->setParameter('idLiq', $idLiq)
                ->setParameter('apellido', '%' . $apePersona . '%')
                ->setParameter('nombre', '%' . $nomPersona . '%');
                
        
       return $query->getResult(Query::HYDRATE_ARRAY);
       
}

/**
     * Devuelve solo los datos necesarios para las vistas show.
     * Con los aportantes ordenados alfabeticamente
     * @param int $idLiq
     * @param int $idPersona
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function getAportantesIdByLiquidacion($idLiq, $idPersona)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(
                 'SELECT ' .
                'i, ap, p, c '.              
                'FROM SiafcaIntranetBundle:Item i ' .
                'JOIN i.liquidacion l ' .
                'JOIN i.aportante ap ' .
                'JOIN ap.persona p ' .
                'JOIN ap.cargo c ' 
                . 'WHERE '
                . 'l.id = :idLiq '
                . 'AND p.id = :idPersona '
                )    
                ->setParameter('idLiq', $idLiq)
                ->setParameter('idPersona', $idPersona);
                         
//       return $query->getResult(Query::HYDRATE_ARRAY);
        return $query->getResult();
    }

    }
