<?php

namespace Caja\SiafcaIntranetBundle\Repository;

use Caja\SiafcaIntranetBundle\Entity\Liquidacion;
use Caja\SiafcaIntranetBundle\Entity\Item;
use Caja\SiafcaIntranetBundle\Entity\ConceptoItem;
use Doctrine\ORM\Query;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;


/**
 * LiquidacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LiquidacionRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * 
     * Ejecuta un procedimiento almacenado, el procedimiento
     *  debe devolver un CHAR(1)
     * 
     * @param string $statement
     * @return int
     */
    private function executeStoreProc($statement)
    {
        $em = $this->getEntityManager()->getConnection();
        
        $query = $em->prepare($statement);
        $query->bindParam(':return_value', $returnValue, SQLT_CHR, 1);
        $query->execute();
        
        
        return (int) $returnValue;
    }


    public function cargarIMPORTADAT($idLiquidacion)
    {
        $statement = 'BEGIN :return_value := SF_WS_IMPORTA_DAT('.$idLiquidacion.'); END;';
        $success = $this->executeStoreProc($statement); 
        
        return $success;   
    }
    
    public function procesarIMPORTADAR($idLiquidacion)
    {
        $statement = 'BEGIN :return_value := SF_WS_PROCESA_IMPORTA_DAT('.$idLiquidacion.'); END;';
        $success = $this->executeStoreProc($statement); 
        
        return $success; 
    }
    
    /**
     *  Ejecuta el procedimiento almacenado que realiza los controles sobre una Liquidaci칩n
     * @param int $idLiquidacion
     * @return int
     */
    public function controlarLiquidacion($idLiquidacion)
    {
        $statement = 'BEGIN :return_value := SF_WS_CONTROL('.$idLiquidacion.'); END;';
        $success = $this->executeStoreProc($statement); 
        
        return $success; 
    }

    public function itemsVacios($liquidacion)
    {
        $em = $this->getEntityManager();

        $organismo = $liquidacion->getOrganismo();
        




        $aportantes = $organismo->getAportantes();
        $items = array();

        $cRemun = $em->getRepository("SiafcaIntranetBundle:Concepto")->findOneBy(array('codigo' => '50'));
        $cNoRemun = $em->getRepository("SiafcaIntranetBundle:Concepto")->findOneBy(array('codigo' => '51'));
        $cApPer = $em->getRepository("SiafcaIntranetBundle:Concepto")->findOneBy(array('codigo' => '01'));
        $cApPat = $em->getRepository("SiafcaIntranetBundle:Concepto")->findOneBy(array('codigo' => '02'));

        $conPrinc = array($cRemun, $cNoRemun, $cApPer, $cApPat);


        foreach ($aportantes as $aportante) {
            $item = new Item();
            $item->setAportante($aportante);
            $item->setLiquidacion($liquidacion);
            foreach ($conPrinc as $concepto) {
                $conceptoItem = new ConceptoItem();
                $conceptoItem->setConcepto($concepto);
                $conceptoItem->setImporte(0);
                $conceptoItem->setItem($item);

                $amparos = $aportante->getAmparos();
                if (sizeof($amparos)){
                    foreach($amparos as $amparo){
                        $amparoItemConceptos = $amparo->getItemConceptos();
                        foreach($amparoItemConceptos as $amparoItemConcepto){
                            if($conceptoItem->getConcepto()->getId() == $amparoItemConcepto->getConcepto()->getId()){
                                $conceptoItem->setPorcentaje($amparoItemConcepto->getPorcentaje());
                            }

                        }
                    }
                } else {
                    $conceptoItem->setPorcentaje($concepto->getPorcentaje());
                }

                $item->addConceptosItem($conceptoItem);
            }
            $liquidacion->addItem($item);

            $items[] = $item;
        }
        //return $items;
    }

    /**
     * 
     * @param array[] $liquidacionArray
     * @return Liquidacion
     */
    public function crearLiquidacion($liquidacionArray)
    {
        $em = $this->getEntityManager();
        $organismo = $em->getRepository('SiafcaIntranetBundle:Organismo')->find($liquidacionArray['organismo']['id']);
        $tipo = $em->getRepository('SiafcaIntranetBundle:Parametrizacion')->find($liquidacionArray['tipoLiq']['id']);
        $fuente = $em->getRepository('SiafcaIntranetBundle:Parametrizacion')->find($liquidacionArray['fuenteLiq']['id']);
        $estado = $em->getRepository('SiafcaIntranetBundle:Estado')->findOneBy(array(
            'clase' => 'LIQ',
            'estado' => '00'
        ));
        $liquidacion = new Liquidacion();
        $liquidacion->setOrganismo($organismo);
        $liquidacion->setTipoLiq($tipo);
        $liquidacion->setFuenteLiq($fuente);
        $liquidacion->setEstado($estado);
        $liquidacion->initialize($liquidacionArray);
        $liquidacion->setAnio($liquidacionArray['anio']);
        $liquidacion->setMes($liquidacionArray['mes']);
        $liquidacion->setTitulo($liquidacionArray['titulo']);
        $liquidacion->setDescripcion($liquidacionArray['descripcion']);
        $liquidacion->setNroLiq($this->getNextNroLiq($liquidacion));
        return $liquidacion;
    }
    
    /**
     * Obtiene el siguiente numero (incremental con paso 1) de liquidaci칩n a asignar para distincion entre
     * liquidaciones de mismo mes a침o, tipo y organismo, tomando como comparacion los datos de $oLiquidacion.
     * De no encontrar instancias previas, se retorna el valor por defecto donde inicia el conteo: 0
     * @param Liquidacion $oLiquidacion
     * @return int El numero de liquidacion que se debe asignar a la siguiente
     */
    public function getNextNroLiq($oLiquidacion) {
        $uniqueParams = $oLiquidacion->getUniqueKey();
        if (!isset($uniqueParams['nroLiq']) || is_null($uniqueParams['nroLiq'])) {
            $codigoTipo = $oLiquidacion->getTipoLiq()->getCodigo();
            if ($codigoTipo == 111 || $codigoTipo == 211) { // Para liquidaciones originales se asigna siempre 0. No admiten multiple cargas en un periodo.
                $next = 0;
            } else {
                $em = $this->getEntityManager();
                $liqSamePeriod = $em->getRepository('SiafcaIntranetBundle:Liquidacion')->findBy(array(
                    'mes' => $oLiquidacion->getMes(),
                    'anio' => $oLiquidacion->getAnio(),
                    'tipoLiq' => $oLiquidacion->getTipoLiq(),
                    'organismo' => $oLiquidacion->getOrganismo(),
                ), array('nroLiq' => 'DESC'), 1, 0);
                $next = ($liqSamePeriod && count($liqSamePeriod) > 0 && !is_null($liqSamePeriod[0]->getNroLiq()))? ($liqSamePeriod[0]->getNroLiq()+1) : 0;
            }
        } else {
            $next = $uniqueParams['nroLiq']; // Si la liquidacion ya tiene numero, se retorna el actual.
        }
        return $next;
    }
    
    /**
     * Borra los items de una liquidaci칩n,  sus respectivos controles y 
     * la pone en estado Sin Datos
     * @param int $idLiquidacion
     * @return int
     */
    public function borrarDatos($idLiquidacion)
    {
        $statement = 'BEGIN :return_value := SF_WS_ELIMINAR('.$idLiquidacion.'); END;';
        $success = $this->executeStoreProc($statement); 
        
        return $success;
    }
    
    /**
     * 
     * @param Caja\SiafcaIntranetBundle\Entity\Liquidacion $liquidacion
     */
    public function removeExtraItems($liquidacion)
    {
        $em = $this->getEntityManager();
        $qb = $em->getRepository('SiafcaIntranetBundle:Item')->createQueryBuilder('i');
        $qb->where('i.liquidacion = :liqid AND i.id NOT IN (:ids)')
            ->setParameter('liqid', $liquidacion->getId())
            ->setParameter('ids', $liquidacion->getItemIds());
        $query = $qb->getQuery();
        $itemsToRemove = $query->getResult();
        if ($itemsToRemove) {
            foreach ($itemsToRemove as $itemToRemove) {
                $em->remove($itemToRemove);
            }
        }
        
        $em->flush();
    }
    
    /**
     * 
     * @return Caja\SiafcaIntranetBundle\Entity\Liquidacion[]
     */
    public function getLiquidacionesPresentadas()
    {
        $em = $this->getEntityManager();
        $dql = $this->getDqlLiquidacionesPresentadas();
        $query = $em->createQuery($dql);
//        $liquidaciones = $query->getResult();
        $liquidaciones = $this->findBy(array('anio' => '2016'), NULL    , 15);
        
        return $liquidaciones;
    }
    
    public function getDqlLiquidacionesPresentadas()
    {
        return "SELECT l FROM SiafcaIntranetBundle:Liquidacion l JOIN l.estado e WHERE e.estado IN ('08', '09', '10', '11', '13') AND e.clase = 'LIQ'";
    }


    public function ftpCheckFile($server, $user, $pass, $idLiquidacion)
    {
        $id = str_pad($idLiquidacion, 12, "0", STR_PAD_LEFT);

        $fileName = "JUBI" . $id . ".DAT";


        $ftp_server = $server;
        $ftp_user = $user;
        $ftp_pass = $pass;
        $server_file = $fileName;
        $local_dir = "/home/desarrollo/public_html/siafca-web/web/temp/". $idLiquidacion;
        $local_file = $local_dir . "/JUBI.DAT";
        $route = "temp/" . $idLiquidacion . "/JUBI.DAT";


        if(!file_exists($local_dir))
            mkdir($local_dir,0777);

        
        $ftp_conn = ftp_connect($ftp_server);

        if ($ftp_conn) {
            $ftp_login = ftp_login($ftp_conn, $ftp_user, $ftp_pass);
            ftp_pasv($ftp_conn, true);
        } else
            throw new NotFoundHttpException("Error conexion ftp (1)");

        //DIRECTORIOFTP
        //CAMBIAR /a POR /SIAFCA
        if ($ftp_login)
            $ftp_chdir = ftp_chdir($ftp_conn, "/a");
        else
            throw new NotFoundHttpException("Error login ftp (2)");

        if ($ftp_chdir)
            $ftp_nlist = ftp_nlist($ftp_conn, ".");
        else
            throw new NotFoundHttpException("Error chdir ftp (3)");

        if ($ftp_nlist)
            $file_exists = in_array($server_file, $ftp_nlist);
        else
            throw new NotFoundHttpException("Error nlist ftp (4)");

        if ($file_exists) {
                ftp_pasv($ftp_conn, true);
            $handle = fopen($local_file, 'w');

            if ($handle) {
                $ftp_fget = ftp_fget($ftp_conn, $handle, $server_file, FTP_ASCII);
            } else
                throw new NotFoundHttpException("Error handle ftp (5)");

            if ($ftp_fget) {
                $response['jubidat'] = true;
                $response['success'] = true;
                $response['file'] = $route;


            } else
                throw new NotFoundHttpException("Error fget ftp (6)");
        }
        else {
            $response['jubidat'] = true;
            $response['success'] = false;
        }

        return $response;
    }


    public function jubiDatExists($idLiquidacion)
    {
        $id = str_pad($idLiquidacion, 12, "0", STR_PAD_LEFT);

        $fileName = "JUBI" . $id . ".DAT";

        $response = array(
            'success' => false,
            'jubidat' => true,
            'file' => '',
            'mensaje' => '',
            'fileName' => $fileName,
        );




        if (file_exists("temp/" . $idLiquidacion . "/JUBI.DAT")) {
            $response['jubidat'] = true;
            $response['success'] = true;
            $response['file'] = "temp/" . $idLiquidacion . "/JUBI.DAT";
        } else {
            /*
             * DATOSFTP
             * SETEAR SERVER,USER Y PASS
             * SETEAR $server_file A $fileName (nombre del archivo de la forma
             * JUBI000000111111.DAT)
             */
            $ftp_server = "10.1.80.10";
            $ftp_user = "cnass";
            $ftp_pass = "cnass";
            $server_file = "test.dat";

            $response = $this->ftpCheckFile($ftp_server, $ftp_user, $ftp_pass, $idLiquidacion);

                   
            if (!$response['success']){
                //BYPASSSTOREPROC
                //DECOMENTAR LA LINEA $success = $this->executeStoreProc($statement);
                //BORRAR LINEA $success = true;
                $statement = 'BEGIN :return_value := SF_WS_JUBI_DAT(' . $idLiquidacion . '); END;';
                //$success = $this->executeStoreProc($statement);
                $success = true;
                
                if ($success) {
                    $response = $this->ftpCheckFile($ftp_server, $ftp_user, $ftp_pass, $fileName);
                } else {
                    $response['jubidat'] = false;
                    $response['mensaje'] = "No se pudo generar el JUBI.DAT";
                    $response['success'] = false;
                }
            }
        }

        return $response;
    }


    /**
     * Genera el JUBIDAT de una liquidaci칩n
     * @param int $idLiquidacion
     * @return int
     
    public function generateJubiDat($idLiquidacion)
    {
        $response = array(
            'success' => false,
            'file' => '',
        );
        $statement = 'BEGIN :return_value := SF_WS_JUBI_DAT(' . $idLiquidacion . '); END;';
        $response['success'] = $this->executeStoreProc($statement);

        if ($response['success']) {


            $ftp_server = "10.1.80.10";
            $ftp_user = "cnass";
            $ftp_pass = "cnass";



            $ftp_conn = ftp_connect($ftp_server);

            if ($ftp_conn)
                $ftp_login = ftp_login($ftp_conn, $ftp_user, $ftp_pass);
            else throw new NotFoundHttpException("Error conexion ftp (1)");

            ftp_pasv($ftp_conn, true);

            if ($ftp_login)
                $ftp_chdir = ftp_chdir($ftp_conn, "/a");
            else throw new NotFoundHttpException("Error login ftp (2)");



            $id = str_pad($idLiquidacion, 12, "0", STR_PAD_LEFT);


            $local_file = "/home/desarrollo/public_html/siafca-web/web/temp/JUBI" . $id . ".DAT";

            $server_file = "test.dat";


            if ($ftp_chdir)
                $handle = fopen($local_file, 'w');
            else throw new NotFoundHttpException("Error chdir ftp (3)");

            if ($handle) {
                //$file = file_get_contents("ftp://cnass:cnass@10.1.80.10/a/test.dat");
                $ftp_fget = ftp_fget($ftp_conn, $handle, $server_file, FTP_ASCII);
            } else throw new NotFoundHttpException("Error 4");

            if ($ftp_fget){
                $response['file'] = "/../web/temp/JUBI" . $id . ".DAT";
                $response['filename'] = "JUBI" . $id . ".DAT";
                $response['success'] = true;
            }else throw new NotFoundHttpException("Error 5");

            ftp_close($ftp_conn);

        }


        return $response;
    }


*/
    /**
     * 
     * @param int $idOrg
     * @param int $limit
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function getTheLastPresentadas($idOrg, $limit)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
                $qb->select('p')
                    ->from('SiafcaIntranetBundle:Presentacion', 'p')
                    ->join('p.liquidacion', 'l')
                    ->join('l.organismo', 'o')
                    ->where('o.id = '.$idOrg)
                    ->orderBy('p.fechaPresentacion', 'DESC');
                
        $presentaciones = $qb->getQuery()->setMaxResults($limit)->getResult();
        $liquidaciones = new \Doctrine\Common\Collections\ArrayCollection();
        foreach ($presentaciones as $presentacion) {
            $liquidaciones->add($presentacion->getLiquidacion());
        }
        
        return $liquidaciones;
    }
    
    /**
     * Devuelve solo los datos necesarios para las vistas show.
     * Con los aportantes ordenados alfabeticamente
     * @param int $liqId
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function showData($liqId)
    {
        $em = $this->getEntityManager();

        $query = $em->createQuery(
            'SELECT '.
                'partial l.{id, titulo, mes, anio, descripcion}, '.
                'partial e.{id, estado, nombre}, '.
                'partial tl.{id, nombre}, '.
                'partial fl.{id, nombre, codigo}, '.
                'partial i.{id}, '.
                'partial ci.{id, importe }, '.
                'partial co.{id, nombre, codigo }, '.
                'partial a.{id, nroLiq}, '.
                'partial p.{id, cuil, nombre, apellidoMat, apellidoPat}, '.
                'partial c.{id, nombre}, '.
                'CONCAT(p.apellidoPat, \' \', p.apellidoMat, \' \', p.nombre) AS HIDDEN name '.
            'FROM SiafcaIntranetBundle:Liquidacion l '.
                'LEFT JOIN l.estado e '.
                'LEFT JOIN l.tipoLiq tl '.
                'LEFT JOIN l.fuenteLiq fl '.
                'LEFT JOIN l.items i '.
                'LEFT JOIN i.aportante a '.
                'LEFT JOIN i.conceptosItem ci '.
                'LEFT JOIN ci.concepto co '.
                'LEFT JOIN a.persona p '.
                'LEFT JOIN a.cargo c '.
            'WHERE l.id = ?1 '.
            'ORDER BY name, co.codigo ASC'
        )->setParameter(1, $liqId);
                 
        return $query->getOneOrNullResult(Query::HYDRATE_ARRAY);
    }
    
   
      /**
     * Devuelve solo los datos necesarios para las vistas show.
     * Con los aportantes ordenados alfabeticamente
     * @param int $liqId
     * @param int $offset
     * @param int $limite
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function showDatosAportantes($liqId, $offset, $limite)
    {
        $em = $this->getEntityManager();

        $query = $em->createQuery(
                'SELECT ' .
                'i, l, a, p, c '.              
                'FROM SiafcaIntranetBundle:Item i ' .
                'JOIN i.liquidacion l ' .
                'JOIN i.aportante a ' .
                'JOIN a.persona p ' .
                'JOIN a.cargo c ' .
                'WHERE l.id = ?1 ' .
                'ORDER BY p.apellidoPat,p.apellidoMat,p.nombre,p.cuil ASC'               
                )->setParameter(1, $liqId)
                ->setFirstResult($offset)
                ->setMaxResults($limite);

        return $query->getResult(Query::HYDRATE_ARRAY);
    }
    
     /**
     * Devuelve solo los datos necesarios para las vistas show.
     * Con los aportantes ordenados alfabeticamente
     * @param int $liqId
     * @param int $itemId
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function conceptoItem($liqId, $itemId)
    {
        $em = $this->getEntityManager();

        $query = $em->createQuery(
                'SELECT ' .
                'i, ci, co, a, p '.              
                'FROM SiafcaIntranetBundle:Item i ' .
                'JOIN i.liquidacion l ' .
                'JOIN i.aportante a ' .
                'JOIN a.persona p ' .
                'JOIN i.conceptosItem ci ' .
                'JOIN ci.concepto co ' .
                
                'WHERE i.id = ?2 and l.id = ?1 '
                               
                )->setParameter(2, $itemId)
                ->setParameter(1, $liqId);
                
           return $query->getResult(Query::HYDRATE_ARRAY);
    }
        
    /**
     * Devuelve la liquidacion para armado del pdf 910
     * @param int $liqId
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    
    public function getLiquidacion910($liqId)
    {
        $em = $this->getEntityManager();

        $query = $em->createQuery(
            'SELECT '.
                'partial l.{id, mes, anio}, '.
                'partial tl.{id, nombre}, '.
                'partial fl.{id, nombre, codigo} '.
            'FROM SiafcaIntranetBundle:Liquidacion l '.
                'LEFT JOIN l.tipoLiq tl '.
                'LEFT JOIN l.fuenteLiq fl '.
            'WHERE l.id = ?1'
        )->setParameter(1, $liqId);

        return $query->getOneOrNullResult(Query::HYDRATE_ARRAY);
    }

    /**
     * Devuelve la liquidacion con datos necesarios para carga manual
     * @param int $liqId
     * @return \Doctrine\Common\Collections\ArrayCollection
     */
    public function getLiquidacionCargaManual($liqId)
    {
        $em = $this->getEntityManager();

        $query = $em->createQuery(
            'SELECT partial l.{id, titulo, mes, anio} '.
            'FROM SiafcaIntranetBundle:Liquidacion l '.
            'WHERE l.id = ?1'
        )->setParameter(1, $liqId);

        return $query->getOneOrNullResult(Query::HYDRATE_ARRAY);
    }
    
    
    /**
     * Devuelve la liquidacion con datos necesarios para carga manual
     * @param int $idLiq
     * @return int
     */
    public function getTotalAportantesLiq($idLiq)
    {
        $em = $this->getEntityManager();

        $query = $em->createQuery(
           'SELECT COUNT (i)'.
            'FROM SiafcaIntranetBundle:Item i '.
                'LEFT JOIN i.liquidacion l '.
                'WHERE l.id = :idliq ')
            ->setParameter('idliq', $idLiq)
            ->getResult();

        return $query;
    }
    
    /**
     * Devuelve todas las liquidaciones asociadas a un id de organismo en un a침o
     * @param int $orgId 
     * @param string $anio
     * @return string
     */
    public function liquidacionAnio($orgId, $anio)
    {
        return $this
                   ->getEntityManager()
                   ->createQuery(
            'SELECT '.
                'partial l.{id, anio, mes}, '.
                'partial e.{id, estado, nombre}, '.
                'partial tl.{id, nombre}, '.
                'partial fl.{id, nombre, codigo} '.
            'FROM SiafcaIntranetBundle:Liquidacion l '.
                'JOIN l.estado e '.
                'JOIN l.tipoLiq tl '.
                'JOIN l.fuenteLiq fl '.
                'WHERE (l.organismo = ?1 AND l.anio = :anioIngresado)'.
            'ORDER BY l.anio DESC, l.mes DESC'
            )
         ->setParameter(1, $orgId)
         ->setParameter('anioIngresado',$anio)
         ->getArrayResult()
        ;
    }
    
    /*
     * Devuelve todos los aportantes asociados a la liquidacion
     * @param dni del aportante
     * @param idliq de la liquidacion
     */
    public function obtenerAportantesDni($idliq,$dni)
    {
        return   $this->getEntityManager()
                       ->createQuery(
                                'SELECT partial i.{id}'
                                . 'FROM SiafcaIntranetBundle:Item i'
                                . ' JOIN i.liquidacion l'
                                . ' JOIN i.aportante a'
                                . ' JOIN a.persona p '
                                . ' WHERE l.id = :idLiq AND p.documento = :dni'
                                . ' ORDER BY p.apellidoPat,p.nombre ASC')
                        ->setParameter('idLiq', $idliq)
                        ->setParameter('dni',$dni)
                        ->getResult()
                ;
    }
    
    /**
     * Devuelve todos los aportantes asociados a la liquidacion
     * @param dni del aportante
     * @param idliq de la liquidacion
     */
    public function obtenerAportantesCuil($idLiq,$cuil)
    {
        return  $this->getEntityManager()
                       ->createQuery(
                                'SELECT partial i.{id}'
                                . 'FROM SiafcaIntranetBundle:Item i'
                                . ' JOIN i.liquidacion l'
                                . ' JOIN i.aportante a'
                                . ' JOIN a.persona p '
                                . ' WHERE l.id = :idLiq AND p.cuil = :cuil'
                                . ' ORDER BY p.apellidoPat,p.nombre ASC')
                        ->setParameter('idLiq', $idLiq)
                        ->setParameter('cuil',$cuil)
                        ->getResult()
                ;
    }
    
    /**
     * Devuelve todos los aportantes asociados a la liquidacion
     * @param apellido del aportante
     * @param nombre del aportante
     * @param idliq de la liquidacion
     */
    public function obtenerAportantesApellidoNombre($idLiq,$apellido,$nombre)
    {
        //sentencia dql 
        $dql = 'SELECT partial i.{id}'
                                . 'FROM SiafcaIntranetBundle:Item i'
                                . ' JOIN i.liquidacion l'
                                . ' JOIN i.aportante a'
                                . ' JOIN a.persona p ';
        //obtengo la sentencia where
        $where = '';
        
        //order by
        $orderby = 'ORDER BY p.apellidoPat,p.nombre ASC';
        
        //obtengo la consulta
        if($apellido != 'null' && $nombre != 'null')
        {
            $where =  'WHERE l.id = :idLiq AND p.apellidoPat LIKE :apellido AND p.nombre LIKE :nombre';
            //concateno dql con where y orderby
            $consulta = $dql . ' ' . $where . ' ' . $orderby;
        
            $query = $this->getEntityManager()
                    ->createQuery($consulta)
                    ->setParameter('idLiq', $idLiq)
                    ->setParameter('apellido','%'.$apellido.'%')
                    ->setParameter('nombre','%'.$nombre.'%')
                ;
        }
        else if($apellido != 'null' && $nombre == 'null')
        {
            $where =  'WHERE l.id = :idLiq AND p.apellidoPat LIKE :apellido';
            //concateno dql con where y orderby
            $consulta = $dql . ' ' . $where . ' ' . $orderby;
        
            $query = $this->getEntityManager()
                    ->createQuery($consulta)
                    ->setParameter('idLiq', $idLiq)
                    ->setParameter('apellido','%'.$apellido.'%')
                ;
        }
        else
        {
            $where =  'WHERE l.id = :idLiq AND p.nombre LIKE :nombre';
            //concateno dql con where y orderby
            $consulta = $dql . ' ' . $where . ' ' . $orderby;
        
            $query = $this->getEntityManager()
                    ->createQuery($consulta)
                    ->setParameter('idLiq', $idLiq)
                    ->setParameter('nombre','%'.$nombre.'%')
                ;
        }
        return $query->getResult();
    }
}
